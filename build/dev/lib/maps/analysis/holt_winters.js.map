{"version":3,"sources":["analysis/holt_winters.js"],"names":["define","lineChart","datatables","utils","$q","d3","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","qSortCriterias","qSortByNumeric","measure","validateMeasure","measures","frequency","holtWintersParams","autoHoltWinters","holtWintersAlpha","holtWintersBeta","holtWintersGamma","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","seasonal","confidenceLevel","forecastingPeriods","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","result","qMatrix","qText","length","i","parse","displayConnectionError","extId","displayReturnedDatasetToConsole","palette","getDefaultPaletteColor","mean","upper","lower","params","alpha","beta","gamma","displayTable","datasets","dataLength","elemNum","dim1","mea1","$","each","key","value","push","qElemNumber","qNum","mea2","Array","mea3","mea4","chartData","x","y","name","mode","fill","line","fillcolor","colors","getConversionRgba","colorForMain","color","marker","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","customOptions","xaxis","title","xLabelsAndTitle","label","showgrid","xScale","side","xAxisPosition","displayHoltWintersParams","html","chart","draw","setEvents","locale","getLocale","numberFormat","getNumberFormat","dataset","format","replace","table","resolve","promise"],"mappings":"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","file":"../../js/analysis/holt_winters.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension],\r\n          qSortCriterias: [{\r\n            qSortByNumeric: 1,\r\n          }],\r\n        },\r\n      }];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      let frequency = '';\r\n      if (layout.props.frequency > 0) {\r\n        frequency = `,frequency=${layout.props.frequency}`;\r\n      }\r\n\r\n      let holtWintersParams = '';\r\n      if (!layout.props.autoHoltWinters) {\r\n        holtWintersParams = `,alpha=${layout.props.holtWintersAlpha},beta=${layout.props.holtWintersBeta},gamma=${layout.props.holtWintersGamma}`\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_holt_winters.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('N', '${saveRDataset} library(jsonlite);library(dplyr);library(forecast);data<-ts(na.omit(q$Measure) ${frequency});\r\n      fit<-HoltWinters(data, seasonal=\"${layout.props.seasonal}\" ${holtWintersParams});\r\n      res<-forecast(fit, level=${layout.props.confidenceLevel}, h=${layout.props.forecastingPeriods});\r\n      json<-toJSON(list(as.double(res$mean),as.double(res$upper),as.double(res$lower),list(fit$alpha, fit$beta, fit$gamma, fit$coefficients))); json;', ${measure} as Measure)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        let result = null;\r\n        const qMatrix = dataPages[0].qMatrix;\r\n\r\n        // Check the result returned from R\r\n        if (qMatrix[0][2].qText.length === 0 || qMatrix[0][2].qText == '-') {\r\n          for (let i = 0; i < qMatrix.length; i++) {\r\n            if (qMatrix[i][2].qText.length !== 0 && qMatrix[i][2].qText !== '-') {\r\n              result = JSON.parse(qMatrix[i][2].qText);\r\n            }\r\n          }\r\n        } else {\r\n          result = JSON.parse(qMatrix[0][2].qText);\r\n        }\r\n\r\n        if (result == null) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const mean = result[0];\r\n          const upper = result[1];\r\n          const lower = result[2];\r\n          const params = result[3];\r\n\r\n          // Holt-Winters parameters\r\n          const alpha = params[0];\r\n          const beta = params[1];\r\n          const gamma = params[2];\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n            const datasets = {};\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = []; // Actual values\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n            });\r\n            datasets.elemNum = elemNum;\r\n            datasets.dim1 = dim1;\r\n            datasets.mea1 = mea1;\r\n\r\n            // Store forecast values to datasets\r\n            const mea2 = new Array(dataLength); // Forecast (mean)\r\n            const mea3 = new Array(dataLength); // Forecast (upper)\r\n            const mea4 = new Array(dataLength); // Forecast (lower)\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              datasets.dim1.push(`+${i + 1}`); // Forecast period is displayed as +1, +2, +3...\r\n              mea2.push(mean[i]);\r\n              mea3.push(upper[i]);\r\n              mea4.push(lower[i]);\r\n            }\r\n            datasets.mea2 = mea2;\r\n            datasets.mea3 = mea3;\r\n            datasets.mea4 = mea4;\r\n\r\n            const chartData = [\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea1,\r\n                elemNum: datasets.elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill: layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForMain.color, 1)})`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${utils.getConversionRgba(layout.props.colorForMain.color, 1)})`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea2,\r\n                name: 'Fit',\r\n                mode: 'lines+markers',\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[7]},1)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 1)})`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                  //color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea3,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 0.3)})`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea4,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 0.3)})`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            ];\r\n\r\n            const customOptions = {\r\n              xaxis: {\r\n                type: 'category',\r\n                title: $scope.layout.props.xLabelsAndTitle ? $scope.layout.props.dimensions[0].label : '',\r\n                showgrid: $scope.layout.props.xScale,\r\n                side: $scope.layout.props.xAxisPosition,\r\n              },\r\n            };\r\n\r\n            if (layout.props.displayHoltWintersParams) {\r\n              // Display Holtwiters parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`)\r\n              .html(`\r\n                <div style=\"width:100%;height:5%;text-align:right;\">alpha=${alpha}, beta=${beta}, gamma=${gamma}</div>\r\n                <div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:95%;\"></div>\r\n              `);\r\n            } else {\r\n              // Hide Holtwiters parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            }\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const dataset = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                '',\r\n                '',\r\n                '',\r\n              ]);\r\n            });\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              dataset.push([\r\n                '',\r\n                `+${i + 1}`, // Forecast period is displayed as +1, +2, +3...\r\n                '',\r\n                locale.format(numberFormat)(mean[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(upper[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(lower[i]).replace(/G/, 'B'),\r\n              ]);\r\n            }\r\n\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}