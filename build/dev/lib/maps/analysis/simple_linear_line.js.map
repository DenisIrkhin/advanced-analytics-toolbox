{"version":3,"sources":["analysis/simple_linear_line.js"],"names":["define","lineChart","datatables","utils","$q","d3","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","qSortCriterias","qSortByExpression","dimSort","dimSortByExpression","dimSortByExpressionAsc","qSortByNumeric","dimSortByNum","dimSortByNumAsc","qSortByAscii","dimSortByAlph","dimSortByAlphAsc","qExpression","qv","dimSortByExpressionString","measure","validateMeasure","measures","sendJson","extendLine","extendDurations","interval","confidenceLevel","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","result","qHyperCube","qMeasureInfo","qMatrix","qText","length","i","parse","displayConnectionError","extId","displayReturnedDatasetToConsole","palette","getDefaultPaletteColor","mean","lower","upper","coef","predMean","predLower","predUpper","equation","displayTable","elemNum","dim1","mea1","$","each","key","value","push","qElemNumber","qNum","merge","chartData","x","y","name","mode","fill","line","fillcolor","colors","getConversionRgba","colorForMain","color","marker","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","position","Math","floor","annotationPosX","annotationPosY","customOptions","annotations","displayFormula","text","xref","yref","ax","ay","showarrow","arrowhead","html","chart","draw","setEvents","locale","getLocale","numberFormat","getNumberFormat","dataset","format","replace","forecastingPeriods","label","table","resolve","promise"],"mappings":"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","file":"../../js/analysis/simple_linear_line.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            qSortCriterias: [{\r\n              qSortByExpression: layout.props.dimSort || !layout.props.dimSortByExpression ? 0 : layout.props.dimSortByExpressionAsc,\r\n              qSortByNumeric: (layout.props.dimSort) ? 1 : (!layout.props.dimSortByNum) ? 0 : layout.props.dimSortByNumAsc,\r\n              qSortByAscii: layout.props.dimSort || !layout.props.dimSortByAlph ? 0 : layout.props.dimSortByAlphAsc,\r\n              qExpression: {\r\n                qv: layout.props.dimSortByExpressionString,\r\n              },\r\n            }],\r\n          },\r\n        },\r\n      ];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      let sendJson = `json<-toJSON(list(res[,1], res[,2], res[,3], coef(summary(lm_result))[,\"Estimate\"]));`;\r\n\r\n      if (layout.props.extendLine) {\r\n        sendJson = `by<-q$Dimension[length(q$Dimension)]-q$Dimension[length(q$Dimension)-1]; from<-q$Dimension[length(q$Dimension)]+by;\r\n                    data<-seq(from=from, by=by, length.out=${layout.props.extendDurations}); newdata <-data.frame(Dimension=data); pred_res<-predict(lm_result,newdata, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel});\r\n                    json<-toJSON(list(res[,1], res[,2], res[,3], coef(summary(lm_result))[,\"Estimate\"], pred_res[,1], pred_res[,2], pred_res[,3]));`;\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_simple_linear_line.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('NN','${saveRDataset} library(jsonlite); lm_result <- lm(Measure~Dimension, data=q);res<-predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel});\r\n      ${sendJson} json;',${dimension} as Dimension, ${measure} as Measure)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Fit',\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        let result = null;\r\n        const qMatrix = dataPages[0].qMatrix;\r\n\r\n        // Check the result returned from R\r\n        if (qMatrix[0][2].qText.length === 0 || qMatrix[0][2].qText == '-') {\r\n          for (let i = 0; i < qMatrix.length; i++) {\r\n            if (qMatrix[i][2].qText.length !== 0 && qMatrix[i][2].qText !== '-') {\r\n              result = JSON.parse(qMatrix[i][2].qText);\r\n            }\r\n          }\r\n        } else {\r\n          result = JSON.parse(qMatrix[0][2].qText);\r\n        }\r\n\r\n        if (result == null) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const mean = result[0];\r\n          const lower = result[1];\r\n          const upper = result[2];\r\n          const coef = result[3];\r\n          const predMean = result[4];\r\n          const predLower = result[5];\r\n          const predUpper = result[6];\r\n\r\n          // Get equation\r\n          let equation = `y=${coef[1]}x`;\r\n          if (coef[0] < 0) {\r\n            equation += `${coef[0]}`;\r\n          } else {\r\n            equation += `+${coef[0]}`;\r\n          }\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n            });\r\n\r\n            // Extend lines\r\n            if (layout.props.extendLine) {\r\n              $.merge(mean, predMean);\r\n              $.merge(lower, predLower);\r\n              $.merge(upper, predUpper);\r\n              for (let i = 0; i < layout.props.extendDurations; i++) {\r\n                dim1.push(`+${i + 1}`); // Forecast period is displayed as +1, +2, +3...\r\n                mea1.push('');\r\n              }\r\n            }\r\n\r\n            const chartData = [\r\n              {\r\n                x: dim1,\r\n                y: mea1,\r\n                elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill:  layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForMain.color, 1)})`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${utils.getConversionRgba(layout.props.colorForMain.color, 1)})`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mean,\r\n                name: 'Fit',\r\n                line: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[7]}, 1)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 1)})`,\r\n                },\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: lower,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 0.3)})`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: upper,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 0.3)})`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            ];\r\n\r\n            // Add equation as an annotation\r\n            const position = Math.floor(dim1.length/2);\r\n            const annotationPosX = dim1[position];\r\n            const annotationPosY = mean[position];\r\n            const customOptions = {\r\n              annotations: [],\r\n            };\r\n\r\n            if (layout.props.displayFormula) {\r\n              customOptions.annotations.push(\r\n                {\r\n                  x: annotationPosX,\r\n                  y: annotationPosY,\r\n                  text: equation,\r\n                  xref: 'x',\r\n                  yref: 'y',\r\n                  ax: -30,\r\n                  ay: -40,\r\n                  showarrow: true,\r\n                  arrowhead: 3,\r\n                }\r\n              );\r\n            }\r\n\r\n            // Display ARIMA parameters\r\n            $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            const dataset = [];\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(mean[key]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(lower[key]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(upper[key]).replace(/G/, 'B'),\r\n              ]);\r\n            });\r\n\r\n            // Extend lines\r\n            if (layout.props.extendLine) {\r\n              for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n                dataset.push([\r\n                  '',\r\n                  `+${i + 1}`, // Forecast period is displayed as +1, +2, +3...\r\n                  '',\r\n                  locale.format(numberFormat)(predMean[i]).replace(/G/, 'B'),\r\n                  locale.format(numberFormat)(predLower[i]).replace(/G/, 'B'),\r\n                  locale.format(numberFormat)(predUpper[i]).replace(/G/, 'B'),\r\n                ]);\r\n              }\r\n            }\r\n\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}