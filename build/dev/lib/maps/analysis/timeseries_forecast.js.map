{"version":3,"sources":["analysis/timeseries_forecast.js"],"names":["define","lineChart","datatables","utils","$q","d3","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","qSortCriterias","qSortByNumeric","measure","validateMeasure","measures","expression","autoARIMA","AROrder","DegreeOfDifferencing","MAOrder","SeasonalAROrder","SeasonalDegreeOfDifferencing","SeasonalMAOrder","frequency","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","confidenceLevel","forecastingPeriods","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","result","qMatrix","qText","length","i","parse","displayConnectionError","extId","displayReturnedDatasetToConsole","palette","getDefaultPaletteColor","mean","upper","lower","arimaorder","mylimit","limit","displayTable","datasets","dataLength","elemNum","dim1","mea1","$","each","key","value","push","qElemNumber","qNum","mea2","Array","mea3","mea4","mea5","arima","chartData","x","y","name","mode","fill","line","fillcolor","colors","getConversionRgba","colorForMain","color","marker","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","limitlabel","limitcolor","dash","limitstyle","limitwidth","customOptions","xaxis","title","xLabelsAndTitle","label","showgrid","xScale","side","xAxisPosition","displayARIMAParams","html","chart","draw","setEvents","locale","getLocale","numberFormat","getNumberFormat","dataset","format","replace","table","resolve","promise"],"mappings":"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","file":"../../js/analysis/timeseries_forecast.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension],\r\n          qSortCriterias: [{\r\n            qSortByNumeric: 1,\r\n          }],\r\n        },\r\n      }];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      let expression = '';\r\n      if (layout.props.autoARIMA) {\r\n        expression = `fit<-auto.arima(data);`;\r\n      } else {\r\n        expression = `fit<-arima(data, order=c(${layout.props.AROrder},${layout.props.DegreeOfDifferencing},${layout.props.MAOrder})\r\n                      ,seasonal=list(order=c(${layout.props.SeasonalAROrder},${layout.props.SeasonalDegreeOfDifferencing},${layout.props.SeasonalMAOrder}), period=${layout.props.frequency}));`;\r\n      }\r\n\r\n      let frequency = '';\r\n      if (layout.props.frequency > 0) {\r\n        frequency = `,frequency=${layout.props.frequency}`;\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_timeseries_forecast.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('N', '${saveRDataset} library(jsonlite);library(dplyr);library(forecast);data<-ts(na.omit(q$Measure) ${frequency});${expression}\r\n      res<-forecast(fit, level=${layout.props.confidenceLevel}, h=${layout.props.forecastingPeriods});\r\n      json<-toJSON(list(as.double(res$mean),as.double(res$upper),as.double(res$lower),arimaorder(fit))); json;', ${measure} as Measure)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        let result = null;\r\n        const qMatrix = dataPages[0].qMatrix;\r\n\r\n        // Check the result returned from R\r\n        if (qMatrix[0][2].qText.length === 0 || qMatrix[0][2].qText == '-') {\r\n          for (let i = 0; i < qMatrix.length; i++) {\r\n            if (qMatrix[i][2].qText.length !== 0 && qMatrix[i][2].qText !== '-') {\r\n              result = JSON.parse(qMatrix[i][2].qText);\r\n            }\r\n          }\r\n        } else {\r\n          result = JSON.parse(qMatrix[0][2].qText);\r\n        }\r\n\r\n        if (result == null) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const mean = result[0];\r\n          const upper = result[1];\r\n          const lower = result[2];\r\n          const arimaorder = result[3];\r\n          // const for reference line\r\n          const mylimit = layout.props.limit;\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n            const datasets = {};\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = []; // Actual values\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n            });\r\n            datasets.elemNum = elemNum;\r\n            datasets.dim1 = dim1;\r\n            datasets.mea1 = mea1;\r\n\r\n            // Store forecast values to datasets\r\n            const mea2 = new Array(dataLength); // Forecast (mean)\r\n            const mea3 = new Array(dataLength); // Forecast (upper)\r\n            const mea4 = new Array(dataLength); // Forecast (lower)\r\n            const mea5 = new Array(dataLength); // Forecast - Reference Line\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              datasets.dim1.push(`+${i + 1}`); // Forecast period is displayed as +1, +2, +3...\r\n              mea2.push(mean[i]);\r\n              mea3.push(upper[i]);\r\n              mea4.push(lower[i]);\r\n              mea5.push(mylimit);\r\n            }\r\n            datasets.mea2 = mea2;\r\n            datasets.mea3 = mea3;\r\n            datasets.mea4 = mea4;\r\n            datasets.mea5 = mea5;\r\n\r\n            // Calculate ARIMA order\r\n            let arima = '';\r\n            if (0 < arimaorder.length && arimaorder.length <= 3) {\r\n              arima = `(${arimaorder[0]},${arimaorder[1]},${arimaorder[2]})`;\r\n            } else if (arimaorder.length <= 6) {\r\n              arima = `(${arimaorder[0]},${arimaorder[1]},${arimaorder[2]})(${arimaorder[3]},${arimaorder[4]},${arimaorder[5]})`;\r\n            } else if (6 < arimaorder.length) {\r\n              arima = `(${arimaorder[0]},${arimaorder[1]},${arimaorder[2]})(${arimaorder[3]},${arimaorder[4]},${arimaorder[5]})[${arimaorder[6]}]`;\r\n            } else {\r\n              // do nothing\r\n            }\r\n\r\n            const chartData = [\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea1,\r\n                elemNum: datasets.elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill: layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForMain.color, 1)})`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${utils.getConversionRgba(layout.props.colorForMain.color, 1)})`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea2,\r\n                name: 'Fit',\r\n                mode: 'lines+markers',\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[7]},1)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 1)})`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                  //color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea3,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 0.3)})`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea4,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${utils.getConversionRgba(layout.props.colorForSub.color, 0.3)})`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            //Reference line\r\n            {\r\n              x: datasets.dim1,\r\n              y: datasets.mea5,\r\n              name: layout.props.limitlabel,\r\n              mode: 'lines',\r\n              marker: {\r\n                color: `rgba(${utils.getConversionRgba(layout.props.limitcolor.color, 1)})`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                dash: layout.props.limitstyle,\r\n                width: layout.props.limitwidth,\r\n               },\r\n           },\r\n            ];\r\n\r\n            const customOptions = {\r\n              xaxis: {\r\n                type: 'category',\r\n                title: $scope.layout.props.xLabelsAndTitle ? $scope.layout.props.dimensions[0].label : '',\r\n                showgrid: $scope.layout.props.xScale,\r\n                side: $scope.layout.props.xAxisPosition,\r\n              },\r\n            };\r\n\r\n            if (layout.props.displayARIMAParams) {\r\n              // Display ARIMA parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`)\r\n              .html(`\r\n                <div style=\"width:100%;height:5%;text-align:right;\">ARIMA${arima}</div>\r\n                <div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:95%;\"></div>\r\n              `);\r\n            } else {\r\n              // Hide ARIM parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            }\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const dataset = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                '',\r\n                '',\r\n                '',\r\n              ]);\r\n            });\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              dataset.push([\r\n                '',\r\n                `+${i + 1}`, // Forecast period is displayed as +1, +2, +3...\r\n                '',\r\n                locale.format(numberFormat)(mean[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(upper[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(lower[i]).replace(/G/, 'B'),\r\n              ]);\r\n            }\r\n\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}